"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.2.0 (NJsonSchema v10.0.20.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var ApiClientBase_1 = require("./ApiClientBase");
var CartClient = /** @class */ (function (_super) {
    __extends(CartClient, _super);
    function CartClient(baseUrl, http) {
        var _this = _super.call(this) || this;
        _this.jsonParseReviver = undefined;
        _this.http = http ? http : window;
        _this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
        return _this;
    }
    CartClient.prototype.get = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cart";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(function (transformedOptions_) {
            return _this.http.fetch(url_, transformedOptions_);
        }).then(function (_response) {
            return _this.processGet(_response);
        });
    };
    CartClient.prototype.processGet = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = CartViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 401) {
            return response.text().then(function (_responseText) {
                var result401 = null;
                var resultData401 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("A server error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    CartClient.prototype.add = function (productId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cart/Add/{productId}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "POST",
            headers: {}
        };
        return this.transformOptions(options_).then(function (transformedOptions_) {
            return _this.http.fetch(url_, transformedOptions_);
        }).then(function (_response) {
            return _this.processAdd(_response);
        });
    };
    CartClient.prototype.processAdd = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 204) {
            return response.text().then(function (_responseText) {
                return;
            });
        }
        else if (status === 401) {
            return response.text().then(function (_responseText) {
                var result401 = null;
                var resultData401 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("A server error occurred.", status, _responseText, _headers, result401);
            });
        }
        else {
            return response.text().then(function (_responseText) {
                var resultdefault = null;
                var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                resultdefault = ProblemDetails.fromJS(resultDatadefault);
                return throwException("A server error occurred.", status, _responseText, _headers, resultdefault);
            });
        }
    };
    CartClient.prototype.adjustQuantity = function (productId, quantity) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cart/AdjustQuantity/{productId}/{quantity}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        if (quantity === undefined || quantity === null)
            throw new Error("The parameter 'quantity' must be defined.");
        url_ = url_.replace("{quantity}", encodeURIComponent("" + quantity));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "PUT",
            headers: {}
        };
        return this.transformOptions(options_).then(function (transformedOptions_) {
            return _this.http.fetch(url_, transformedOptions_);
        }).then(function (_response) {
            return _this.processAdjustQuantity(_response);
        });
    };
    CartClient.prototype.processAdjustQuantity = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 204) {
            return response.text().then(function (_responseText) {
                return;
            });
        }
        else if (status === 404) {
            return response.text().then(function (_responseText) {
                var result404 = null;
                var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status === 401) {
            return response.text().then(function (_responseText) {
                var result401 = null;
                var resultData401 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("A server error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    CartClient.prototype.remove = function (productId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Cart/Remove/{productId}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {}
        };
        return this.transformOptions(options_).then(function (transformedOptions_) {
            return _this.http.fetch(url_, transformedOptions_);
        }).then(function (_response) {
            return _this.processRemove(_response);
        });
    };
    CartClient.prototype.processRemove = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 204) {
            return response.text().then(function (_responseText) {
                return;
            });
        }
        else if (status === 404) {
            return response.text().then(function (_responseText) {
                var result404 = null;
                var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status === 401) {
            return response.text().then(function (_responseText) {
                var result401 = null;
                var resultData401 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("A server error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return CartClient;
}(ApiClientBase_1.ApiClientBase));
exports.CartClient = CartClient;
var OidcConfigurationClient = /** @class */ (function (_super) {
    __extends(OidcConfigurationClient, _super);
    function OidcConfigurationClient(baseUrl, http) {
        var _this = _super.call(this) || this;
        _this.jsonParseReviver = undefined;
        _this.http = http ? http : window;
        _this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
        return _this;
    }
    OidcConfigurationClient.prototype.getClientRequestParameters = function (clientId) {
        var _this = this;
        var url_ = this.baseUrl + "/_configuration/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(function (transformedOptions_) {
            return _this.http.fetch(url_, transformedOptions_);
        }).then(function (_response) {
            return _this.processGetClientRequestParameters(_response);
        });
    };
    OidcConfigurationClient.prototype.processGetClientRequestParameters = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200 || status === 206) {
            var contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            var fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            var fileName_1 = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(function (blob) { return { fileName: fileName_1, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return OidcConfigurationClient;
}(ApiClientBase_1.ApiClientBase));
exports.OidcConfigurationClient = OidcConfigurationClient;
var ProductsClient = /** @class */ (function (_super) {
    __extends(ProductsClient, _super);
    function ProductsClient(baseUrl, http) {
        var _this = _super.call(this) || this;
        _this.jsonParseReviver = undefined;
        _this.http = http ? http : window;
        _this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
        return _this;
    }
    ProductsClient.prototype.getAll = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Products";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(function (transformedOptions_) {
            return _this.http.fetch(url_, transformedOptions_);
        }).then(function (_response) {
            return _this.processGetAll(_response);
        });
    };
    ProductsClient.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = ProductsListViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    ProductsClient.prototype.get = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Products/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(function (transformedOptions_) {
            return _this.http.fetch(url_, transformedOptions_);
        }).then(function (_response) {
            return _this.processGet(_response);
        });
    };
    ProductsClient.prototype.processGet = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = ProductViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    ProductsClient.prototype.search = function (contains) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Products/search?";
        if (contains !== undefined)
            url_ += "contains=" + encodeURIComponent("" + contains) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(function (transformedOptions_) {
            return _this.http.fetch(url_, transformedOptions_);
        }).then(function (_response) {
            return _this.processSearch(_response);
        });
    };
    ProductsClient.prototype.processSearch = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = ProductViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return ProductsClient;
}(ApiClientBase_1.ApiClientBase));
exports.ProductsClient = ProductsClient;
var SampleDataClient = /** @class */ (function (_super) {
    __extends(SampleDataClient, _super);
    function SampleDataClient(baseUrl, http) {
        var _this = _super.call(this) || this;
        _this.jsonParseReviver = undefined;
        _this.http = http ? http : window;
        _this.baseUrl = baseUrl ? baseUrl : "https://localhost:5001";
        return _this;
    }
    SampleDataClient.prototype.weatherForecasts = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/SampleData/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(function (transformedOptions_) {
            return _this.http.fetch(url_, transformedOptions_);
        }).then(function (_response) {
            return _this.processWeatherForecasts(_response);
        });
    };
    SampleDataClient.prototype.processWeatherForecasts = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                        var item = resultData200_1[_i];
                        result200.push(WeatherForecast.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return SampleDataClient;
}(ApiClientBase_1.ApiClientBase));
exports.SampleDataClient = SampleDataClient;
var CartViewModel = /** @class */ (function () {
    function CartViewModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CartViewModel.prototype.init = function (data) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(CartItemModel.fromJS(item));
                }
            }
            this.total = data["total"];
        }
    };
    CartViewModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CartViewModel();
        result.init(data);
        return result;
    };
    CartViewModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        data["total"] = this.total;
        return data;
    };
    return CartViewModel;
}());
exports.CartViewModel = CartViewModel;
var CartItemModel = /** @class */ (function () {
    function CartItemModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CartItemModel.prototype.init = function (data) {
        if (data) {
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.productImgURL = data["productImgURL"];
            this.unitPrice = data["unitPrice"];
            this.quantity = data["quantity"];
            this.total = data["total"];
        }
    };
    CartItemModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CartItemModel();
        result.init(data);
        return result;
    };
    CartItemModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["productImgURL"] = this.productImgURL;
        data["unitPrice"] = this.unitPrice;
        data["quantity"] = this.quantity;
        data["total"] = this.total;
        return data;
    };
    return CartItemModel;
}());
exports.CartItemModel = CartItemModel;
var ProblemDetails = /** @class */ (function () {
    function ProblemDetails(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ProblemDetails.prototype.init = function (data) {
        if (data) {
            this.type = data["type"];
            this.title = data["title"];
            this.status = data["status"];
            this.detail = data["detail"];
            this.instance = data["instance"];
            if (data["extensions"]) {
                this.extensions = {};
                for (var key in data["extensions"]) {
                    if (data["extensions"].hasOwnProperty(key))
                        this.extensions[key] = data["extensions"][key];
                }
            }
        }
    };
    ProblemDetails.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ProblemDetails();
        result.init(data);
        return result;
    };
    ProblemDetails.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (var key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data;
    };
    return ProblemDetails;
}());
exports.ProblemDetails = ProblemDetails;
var ProductsListViewModel = /** @class */ (function () {
    function ProductsListViewModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ProductsListViewModel.prototype.init = function (data) {
        if (data) {
            if (Array.isArray(data["products"])) {
                this.products = [];
                for (var _i = 0, _a = data["products"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.products.push(ProductDto.fromJS(item));
                }
            }
            this.createEnabled = data["createEnabled"];
        }
    };
    ProductsListViewModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ProductsListViewModel();
        result.init(data);
        return result;
    };
    ProductsListViewModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (var _i = 0, _a = this.products; _i < _a.length; _i++) {
                var item = _a[_i];
                data["products"].push(item.toJSON());
            }
        }
        data["createEnabled"] = this.createEnabled;
        return data;
    };
    return ProductsListViewModel;
}());
exports.ProductsListViewModel = ProductsListViewModel;
var ProductDto = /** @class */ (function () {
    function ProductDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ProductDto.prototype.init = function (data) {
        if (data) {
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.productDescription = data["productDescription"];
            this.productImgURL = data["productImgURL"];
            this.unitPrice = data["unitPrice"];
        }
    };
    ProductDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ProductDto();
        result.init(data);
        return result;
    };
    ProductDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["productDescription"] = this.productDescription;
        data["productImgURL"] = this.productImgURL;
        data["unitPrice"] = this.unitPrice;
        return data;
    };
    return ProductDto;
}());
exports.ProductDto = ProductDto;
var ProductViewModel = /** @class */ (function () {
    function ProductViewModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ProductViewModel.prototype.init = function (data) {
        if (data) {
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.unitPrice = data["unitPrice"];
            this.editEnabled = data["editEnabled"];
            this.deleteEnabled = data["deleteEnabled"];
        }
    };
    ProductViewModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ProductViewModel();
        result.init(data);
        return result;
    };
    ProductViewModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["unitPrice"] = this.unitPrice;
        data["editEnabled"] = this.editEnabled;
        data["deleteEnabled"] = this.deleteEnabled;
        return data;
    };
    return ProductViewModel;
}());
exports.ProductViewModel = ProductViewModel;
var WeatherForecast = /** @class */ (function () {
    function WeatherForecast(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    WeatherForecast.prototype.init = function (data) {
        if (data) {
            this.dateFormatted = data["dateFormatted"];
            this.temperatureC = data["temperatureC"];
            this.summary = data["summary"];
            this.temperatureF = data["temperatureF"];
        }
    };
    WeatherForecast.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new WeatherForecast();
        result.init(data);
        return result;
    };
    WeatherForecast.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["dateFormatted"] = this.dateFormatted;
        data["temperatureC"] = this.temperatureC;
        data["summary"] = this.summary;
        data["temperatureF"] = this.temperatureF;
        return data;
    };
    return WeatherForecast;
}());
exports.WeatherForecast = WeatherForecast;
var ApiException = /** @class */ (function (_super) {
    __extends(ApiException, _super);
    function ApiException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isApiException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    ApiException.isApiException = function (obj) {
        return obj.isApiException === true;
    };
    return ApiException;
}(Error));
exports.ApiException = ApiException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
//# sourceMappingURL=ApiClients.js.map